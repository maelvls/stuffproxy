map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

server {
    listen 80;

    location = / {
        return 301 https://$host/speedtest/;
    }

    location /speedtest/ {
        # See [what-is-break]
        rewrite    ^/speedtest(.*) $1 break;
	
	# See [why-set-variable]
	set $upstream speedtest
	
        proxy_pass http://$upstream;
    }

    location = /firefox {
        return 301 https://$host/firefox/;
    }

    location /firefox/ {
        # See [why-set-variable]
	set $upstream firefox

        proxy_pass http://$upstream:5800/;
        location /firefox/websockify {
	    proxy_pass http://$upstream:5800/websockify/;

	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection $connection_upgrade;
	    proxy_read_timeout 86400;
        }
    }

    location = /transmission {
        return 301 https://$host/transmission/;
    }
    location /transmission/ {
        # See [what-is-break]
        rewrite    ^/transmission(.*) /transmission$1 break;
	
	# By default, Nginx does not proxy headers returned by the
	# upstream server. To enable specific headers returned
	# by the server, I have to use proxy_pass_header.
	# See: http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header
        proxy_pass_header X-Transmission-Session-Id;
	
        # See [why-set-variable]
        set $upstream transmission
	
        proxy_pass http://$upstream:9091;
    }
}

# [why-set-variable]
#
# Nginx needs to be able to resolve (DNS-wise) all the names given
# in proxy_pass statements in order to boot properly. Since we are
# using container names that may not be started or running yet, we
# still want Nginx let traffic flow for the few containers actually
# running.
# 
# In order to work around this resolve issue, we set variables, which
# means the resolving does not happen at boot time.
# See: https://stackoverflow.com/questions/32845674

# [taxing-rewrites]: https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites
# [what-is-break]: https://serverfault.com/questions/131474/nginx-url-rewriting-difference-between-break-and-last

